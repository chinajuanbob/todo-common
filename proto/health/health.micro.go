// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/health/health.proto

/*
Package grpc_health_v1 is a generated protocol buffer package.

It is generated from these files:
	proto/health/health.proto

It has these top-level messages:
	HealthCheckRequest
	HealthCheckResponse
*/
package grpc_health_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Health service

type HealthService interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...client.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...client.CallOption) (Health_WatchService, error)
}

type healthService struct {
	c    client.Client
	name string
}

func NewHealthService(name string, c client.Client) HealthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "grpc.health.v1"
	}
	return &healthService{
		c:    c,
		name: name,
	}
}

func (c *healthService) Check(ctx context.Context, in *HealthCheckRequest, opts ...client.CallOption) (*HealthCheckResponse, error) {
	req := c.c.NewRequest(c.name, "Health.Check", in)
	out := new(HealthCheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthService) Watch(ctx context.Context, in *HealthCheckRequest, opts ...client.CallOption) (Health_WatchService, error) {
	req := c.c.NewRequest(c.name, "Health.Watch", &HealthCheckRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &healthServiceWatch{stream}, nil
}

type Health_WatchService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*HealthCheckResponse, error)
}

type healthServiceWatch struct {
	stream client.Stream
}

func (x *healthServiceWatch) Close() error {
	return x.stream.Close()
}

func (x *healthServiceWatch) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *healthServiceWatch) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *healthServiceWatch) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Health service

type HealthHandler interface {
	Check(context.Context, *HealthCheckRequest, *HealthCheckResponse) error
	Watch(context.Context, *HealthCheckRequest, Health_WatchStream) error
}

func RegisterHealthHandler(s server.Server, hdlr HealthHandler, opts ...server.HandlerOption) error {
	type health interface {
		Check(ctx context.Context, in *HealthCheckRequest, out *HealthCheckResponse) error
		Watch(ctx context.Context, stream server.Stream) error
	}
	type Health struct {
		health
	}
	h := &healthHandler{hdlr}
	return s.Handle(s.NewHandler(&Health{h}, opts...))
}

type healthHandler struct {
	HealthHandler
}

func (h *healthHandler) Check(ctx context.Context, in *HealthCheckRequest, out *HealthCheckResponse) error {
	return h.HealthHandler.Check(ctx, in, out)
}

func (h *healthHandler) Watch(ctx context.Context, stream server.Stream) error {
	m := new(HealthCheckRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.HealthHandler.Watch(ctx, m, &healthWatchStream{stream})
}

type Health_WatchStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*HealthCheckResponse) error
}

type healthWatchStream struct {
	stream server.Stream
}

func (x *healthWatchStream) Close() error {
	return x.stream.Close()
}

func (x *healthWatchStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *healthWatchStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *healthWatchStream) Send(m *HealthCheckResponse) error {
	return x.stream.Send(m)
}
