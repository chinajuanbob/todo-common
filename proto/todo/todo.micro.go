// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/todo/todo.proto

/*
Package chinajuanbob_todo_v1 is a generated protocol buffer package.

It is generated from these files:
	proto/todo/todo.proto

It has these top-level messages:
	Todo
	AddTodoRequest
	AddTodoResponse
	UpdateTodoRequest
	UpdateTodoResponse
	ListTodoRequest
	ListTodoResponse
	DeleteTodoRequest
	DeleteTodoResponse
*/
package chinajuanbob_todo_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TodoService service

type TodoService interface {
	Add(ctx context.Context, in *AddTodoRequest, opts ...client.CallOption) (*AddTodoResponse, error)
	Update(ctx context.Context, in *UpdateTodoRequest, opts ...client.CallOption) (*UpdateTodoResponse, error)
	List(ctx context.Context, in *ListTodoRequest, opts ...client.CallOption) (*ListTodoResponse, error)
	Delete(ctx context.Context, in *DeleteTodoRequest, opts ...client.CallOption) (*DeleteTodoResponse, error)
}

type todoService struct {
	c    client.Client
	name string
}

func NewTodoService(name string, c client.Client) TodoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chinajuanbob.todo.v1"
	}
	return &todoService{
		c:    c,
		name: name,
	}
}

func (c *todoService) Add(ctx context.Context, in *AddTodoRequest, opts ...client.CallOption) (*AddTodoResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.Add", in)
	out := new(AddTodoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Update(ctx context.Context, in *UpdateTodoRequest, opts ...client.CallOption) (*UpdateTodoResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.Update", in)
	out := new(UpdateTodoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) List(ctx context.Context, in *ListTodoRequest, opts ...client.CallOption) (*ListTodoResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.List", in)
	out := new(ListTodoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Delete(ctx context.Context, in *DeleteTodoRequest, opts ...client.CallOption) (*DeleteTodoResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.Delete", in)
	out := new(DeleteTodoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TodoService service

type TodoServiceHandler interface {
	Add(context.Context, *AddTodoRequest, *AddTodoResponse) error
	Update(context.Context, *UpdateTodoRequest, *UpdateTodoResponse) error
	List(context.Context, *ListTodoRequest, *ListTodoResponse) error
	Delete(context.Context, *DeleteTodoRequest, *DeleteTodoResponse) error
}

func RegisterTodoServiceHandler(s server.Server, hdlr TodoServiceHandler, opts ...server.HandlerOption) error {
	type todoService interface {
		Add(ctx context.Context, in *AddTodoRequest, out *AddTodoResponse) error
		Update(ctx context.Context, in *UpdateTodoRequest, out *UpdateTodoResponse) error
		List(ctx context.Context, in *ListTodoRequest, out *ListTodoResponse) error
		Delete(ctx context.Context, in *DeleteTodoRequest, out *DeleteTodoResponse) error
	}
	type TodoService struct {
		todoService
	}
	h := &todoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TodoService{h}, opts...))
}

type todoServiceHandler struct {
	TodoServiceHandler
}

func (h *todoServiceHandler) Add(ctx context.Context, in *AddTodoRequest, out *AddTodoResponse) error {
	return h.TodoServiceHandler.Add(ctx, in, out)
}

func (h *todoServiceHandler) Update(ctx context.Context, in *UpdateTodoRequest, out *UpdateTodoResponse) error {
	return h.TodoServiceHandler.Update(ctx, in, out)
}

func (h *todoServiceHandler) List(ctx context.Context, in *ListTodoRequest, out *ListTodoResponse) error {
	return h.TodoServiceHandler.List(ctx, in, out)
}

func (h *todoServiceHandler) Delete(ctx context.Context, in *DeleteTodoRequest, out *DeleteTodoResponse) error {
	return h.TodoServiceHandler.Delete(ctx, in, out)
}
